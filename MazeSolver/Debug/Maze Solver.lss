
Maze Solver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000b8  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000007e8  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000245  00000000  00000000  00000bea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000383  00000000  00000000  00000e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000154  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000002bc  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000049f  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00001a63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 54 01 	call	0x2a8	; 0x2a8 <main>
  8c:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <pwm_init>:

void pwm_init() {
	/* Use timer 1, channel A for motor 1 and channel B for motor 2 */
	
	/* Set outputs */
	EN_DDR |= _BV(EN1) | _BV(EN2);
  94:	8a b1       	in	r24, 0x0a	; 10
  96:	80 63       	ori	r24, 0x30	; 48
  98:	8a b9       	out	0x0a, r24	; 10
	
	//timer 1 , 8 bit mode , fast pwm non inverting
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (3 << WGM10);
  9a:	e0 e8       	ldi	r30, 0x80	; 128
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	83 6a       	ori	r24, 0xA3	; 163
  a2:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
  a4:	e1 e8       	ldi	r30, 0x81	; 129
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8d 60       	ori	r24, 0x0D	; 13
  ac:	80 83       	st	Z, r24
	
	/* 100% */
	OCR1A = 1023; //right motor
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	93 e0       	ldi	r25, 0x03	; 3
  b2:	90 93 89 00 	sts	0x0089, r25
  b6:	80 93 88 00 	sts	0x0088, r24
	OCR1B = 1023; //left motor
  ba:	90 93 8b 00 	sts	0x008B, r25
  be:	80 93 8a 00 	sts	0x008A, r24
  c2:	08 95       	ret

000000c4 <ADC_init>:
	// *reference AVCC with external capacitor at AREF pin
	// *without left adjust of conversion result
	// *no auto-trigger
	// *no interrupt
	// *prescaler at 128
	ADMUX = (1 << REFS0);
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = (1 << ADEN) | (7 << ADPS0);
  ca:	87 e8       	ldi	r24, 0x87	; 135
  cc:	80 93 7a 00 	sts	0x007A, r24
  d0:	08 95       	ret

000000d2 <ADC_get>:
	#ifndef ADC_USE_IRQ

	// start ADC conversion on "channel"
	// wait for completion
	// return the result
	ADMUX = (ADMUX & ~(0x1f << MUX0)) | channel;
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	90 81       	ld	r25, Z
  d8:	90 7e       	andi	r25, 0xE0	; 224
  da:	89 2b       	or	r24, r25
  dc:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);
  de:	ea e7       	ldi	r30, 0x7A	; 122
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 64       	ori	r24, 0x40	; 64
  e6:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));
  e8:	80 81       	ld	r24, Z
  ea:	86 fd       	sbrc	r24, 6
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <ADC_get+0x16>

	return ADC;
  ee:	80 91 78 00 	lds	r24, 0x0078
  f2:	90 91 79 00 	lds	r25, 0x0079
	return ADC_value[channel];
	#endif

	(void)channel;
	return 0;
}
  f6:	08 95       	ret

000000f8 <move_front>:

}

void move_front(void)
{
	MOTOR_R = 300 + 31;
  f8:	8b e4       	ldi	r24, 0x4B	; 75
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	90 93 89 00 	sts	0x0089, r25
 100:	80 93 88 00 	sts	0x0088, r24
	MOTOR_L = 300;
 104:	8c e2       	ldi	r24, 0x2C	; 44
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	90 93 8b 00 	sts	0x008B, r25
 10c:	80 93 8a 00 	sts	0x008A, r24
 110:	08 95       	ret

00000112 <turn_right>:

//turns 90 degrees
void turn_right()
{
	//set direction
	IN_PORT &= ~_BV(IN3);
 112:	2a 98       	cbi	0x05, 2	; 5
	IN_PORT |= _BV(IN4);
 114:	2b 9a       	sbi	0x05, 3	; 5
	
	MOTOR_L = 400;
 116:	80 e9       	ldi	r24, 0x90	; 144
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	90 93 8b 00 	sts	0x008B, r25
 11e:	80 93 8a 00 	sts	0x008A, r24
	MOTOR_R = 400 + 31;
 122:	8f ea       	ldi	r24, 0xAF	; 175
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	90 93 89 00 	sts	0x0089, r25
 12a:	80 93 88 00 	sts	0x0088, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	8d e2       	ldi	r24, 0x2D	; 45
 132:	92 e2       	ldi	r25, 0x22	; 34
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <turn_right+0x22>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <turn_right+0x2c>
 13e:	00 00       	nop
	_delay_ms(T_NINETYD);
	
	//set direction back to normal
	IN_PORT &= ~_BV(IN4);
 140:	2b 98       	cbi	0x05, 3	; 5
	IN_PORT |= _BV(IN3);
 142:	2a 9a       	sbi	0x05, 2	; 5
 144:	08 95       	ret

00000146 <turn_left>:

//turns 90 degrees
void turn_left()
{
	//set direction
	IN_PORT &= ~_BV(IN2);
 146:	29 98       	cbi	0x05, 1	; 5
	IN_PORT |= _BV(IN1);
 148:	28 9a       	sbi	0x05, 0	; 5
	
	MOTOR_L = 400;
 14a:	80 e9       	ldi	r24, 0x90	; 144
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	90 93 8b 00 	sts	0x008B, r25
 152:	80 93 8a 00 	sts	0x008A, r24
	MOTOR_R = 400 + 31;
 156:	8f ea       	ldi	r24, 0xAF	; 175
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	90 93 89 00 	sts	0x0089, r25
 15e:	80 93 88 00 	sts	0x0088, r24
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	8d e2       	ldi	r24, 0x2D	; 45
 166:	92 e2       	ldi	r25, 0x22	; 34
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <turn_left+0x22>
 170:	00 c0       	rjmp	.+0      	; 0x172 <turn_left+0x2c>
 172:	00 00       	nop
	_delay_ms(T_NINETYD);
	
	//set direction back to normal
	IN_PORT &= ~_BV(IN1);
 174:	28 98       	cbi	0x05, 0	; 5
	IN_PORT |= _BV(IN2);
 176:	29 9a       	sbi	0x05, 1	; 5
 178:	08 95       	ret

0000017a <turn_right_soft>:
}

void turn_right_soft()
{
	//set direction
	IN_PORT &= ~_BV(IN3);
 17a:	2a 98       	cbi	0x05, 2	; 5
	IN_PORT |= _BV(IN4);
 17c:	2b 9a       	sbi	0x05, 3	; 5
	
	MOTOR_L = 400;
 17e:	80 e9       	ldi	r24, 0x90	; 144
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	90 93 8b 00 	sts	0x008B, r25
 186:	80 93 8a 00 	sts	0x008A, r24
	MOTOR_R = 400 + 31;
 18a:	8f ea       	ldi	r24, 0xAF	; 175
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	90 93 89 00 	sts	0x0089, r25
 192:	80 93 88 00 	sts	0x0088, r24
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	83 ec       	ldi	r24, 0xC3	; 195
 19a:	99 e0       	ldi	r25, 0x09	; 9
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <turn_right_soft+0x22>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <turn_right_soft+0x2c>
 1a6:	00 00       	nop
	_delay_ms(200);
	
	//set direction back to normal
	IN_PORT &= ~_BV(IN4);
 1a8:	2b 98       	cbi	0x05, 3	; 5
	IN_PORT |= _BV(IN3);
 1aa:	2a 9a       	sbi	0x05, 2	; 5
 1ac:	08 95       	ret

000001ae <turn_left_soft>:
}

void turn_left_soft()
{
	//set direction
	IN_PORT &= ~_BV(IN2);
 1ae:	29 98       	cbi	0x05, 1	; 5
	IN_PORT |= _BV(IN1);
 1b0:	28 9a       	sbi	0x05, 0	; 5
	
	MOTOR_L = 400;
 1b2:	80 e9       	ldi	r24, 0x90	; 144
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	90 93 8b 00 	sts	0x008B, r25
 1ba:	80 93 8a 00 	sts	0x008A, r24
	MOTOR_R = 400 + 31;
 1be:	8f ea       	ldi	r24, 0xAF	; 175
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	90 93 89 00 	sts	0x0089, r25
 1c6:	80 93 88 00 	sts	0x0088, r24
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	83 ec       	ldi	r24, 0xC3	; 195
 1ce:	99 e0       	ldi	r25, 0x09	; 9
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <turn_left_soft+0x22>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <turn_left_soft+0x2c>
 1da:	00 00       	nop
	_delay_ms(200);
	
	//set direction back to normal
	IN_PORT &= ~_BV(IN1);
 1dc:	28 98       	cbi	0x05, 0	; 5
	IN_PORT |= _BV(IN2);
 1de:	29 9a       	sbi	0x05, 1	; 5
 1e0:	08 95       	ret

000001e2 <run_logic_walls>:
		//read sensors
		rightVal = ADC_get(0);
		frontVal = ADC_get(7);
		
		//check distances
		if(frontVal > CM_FIFTEEN) //checks if distance smaller than 10cm
 1e2:	01 e0       	ldi	r16, 0x01	; 1
	boolean sweetspot = FALSE, hitFront = FALSE, hitRight = FALSE, farRight = FALSE;

	
	while(1) {
		//read sensors
		rightVal = ADC_get(0);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_get>
 1ea:	ec 01       	movw	r28, r24
		frontVal = ADC_get(7);
 1ec:	87 e0       	ldi	r24, 0x07	; 7
 1ee:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_get>
		
		//check distances
		if(frontVal > CM_FIFTEEN) //checks if distance smaller than 10cm
 1f2:	10 2f       	mov	r17, r16
 1f4:	83 35       	cpi	r24, 0x53	; 83
 1f6:	91 40       	sbci	r25, 0x01	; 1
 1f8:	0c f4       	brge	.+2      	; 0x1fc <run_logic_walls+0x1a>
 1fa:	10 e0       	ldi	r17, 0x00	; 0
			hitFront = TRUE;
 1fc:	81 2f       	mov	r24, r17
		if(rightVal > CM_TEN)
 1fe:	c7 3d       	cpi	r28, 0xD7	; 215
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	d9 07       	cpc	r29, r25
 204:	f4 f5       	brge	.+124    	; 0x282 <run_logic_walls+0xa0>
			hitRight = TRUE;
		else if(rightVal < CM_FIFTEEN)
 206:	90 2f       	mov	r25, r16
 208:	c2 35       	cpi	r28, 0x52	; 82
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	d2 07       	cpc	r29, r18
 20e:	0c f0       	brlt	.+2      	; 0x212 <run_logic_walls+0x30>
 210:	90 e0       	ldi	r25, 0x00	; 0

		}
		
			
		
		if(hitFront == TRUE && sweetspot == TRUE)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	09 f0       	breq	.+2      	; 0x218 <run_logic_walls+0x36>
 216:	45 c0       	rjmp	.+138    	; 0x2a2 <run_logic_walls+0xc0>
 218:	91 11       	cpse	r25, r1
 21a:	03 c0       	rjmp	.+6      	; 0x222 <run_logic_walls+0x40>
			turn_left();
 21c:	0e 94 a3 00 	call	0x146	; 0x146 <turn_left>
 220:	1e c0       	rjmp	.+60     	; 0x25e <run_logic_walls+0x7c>
		else if(hitFront == TRUE) {
			turn_right();
 222:	0e 94 89 00 	call	0x112	; 0x112 <turn_right>
			move_front();
 226:	0e 94 7c 00 	call	0xf8	; 0xf8 <move_front>
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	99 e6       	ldi	r25, 0x69	; 105
 22e:	28 e1       	ldi	r18, 0x18	; 24
 230:	81 50       	subi	r24, 0x01	; 1
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	20 40       	sbci	r18, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <run_logic_walls+0x4e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <run_logic_walls+0x58>
 23a:	00 00       	nop
 23c:	10 c0       	rjmp	.+32     	; 0x25e <run_logic_walls+0x7c>
			_delay_ms(200);
			
		}
		else if(farRight == TRUE) {
			//turn_right_arc();
			turn_right_soft();
 23e:	0e 94 bd 00 	call	0x17a	; 0x17a <turn_right_soft>
			move_front();
 242:	0e 94 7c 00 	call	0xf8	; 0xf8 <move_front>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	93 ec       	ldi	r25, 0xC3	; 195
 24a:	29 e0       	ldi	r18, 0x09	; 9
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	20 40       	sbci	r18, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <run_logic_walls+0x6a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <run_logic_walls+0x74>
 256:	00 00       	nop
 258:	02 c0       	rjmp	.+4      	; 0x25e <run_logic_walls+0x7c>
			_delay_ms(200);
		}
		else
			move_front();
 25a:	0e 94 7c 00 	call	0xf8	; 0xf8 <move_front>
		
		
		//if either sensor sees smth open led
		if(frontVal > CM_FIFTEEN || rightVal > CM_FIFTEEN)
 25e:	11 11       	cpse	r17, r1
 260:	03 c0       	rjmp	.+6      	; 0x268 <run_logic_walls+0x86>
 262:	c3 35       	cpi	r28, 0x53	; 83
 264:	d1 40       	sbci	r29, 0x01	; 1
 266:	14 f0       	brlt	.+4      	; 0x26c <run_logic_walls+0x8a>
			LED_PORT |= _BV(LED);
 268:	5f 9a       	sbi	0x0b, 7	; 11
 26a:	01 c0       	rjmp	.+2      	; 0x26e <run_logic_walls+0x8c>
		else
			LED_PORT &= ~_BV(LED);	
 26c:	5f 98       	cbi	0x0b, 7	; 11
 26e:	9f e7       	ldi	r25, 0x7F	; 127
 270:	28 e3       	ldi	r18, 0x38	; 56
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	91 50       	subi	r25, 0x01	; 1
 276:	20 40       	sbci	r18, 0x00	; 0
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	e1 f7       	brne	.-8      	; 0x274 <run_logic_walls+0x92>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <run_logic_walls+0x9c>
 27e:	00 00       	nop
		//reset flags
		sweetspot = FALSE;
		hitRight = FALSE;
		hitFront = FALSE;
		farRight = FALSE;
	}
 280:	b1 cf       	rjmp	.-158    	; 0x1e4 <run_logic_walls+0x2>
		
			
		
		if(hitFront == TRUE && sweetspot == TRUE)
			turn_left();
		else if(hitFront == TRUE) {
 282:	11 30       	cpi	r17, 0x01	; 1
 284:	71 f2       	breq	.-100    	; 0x222 <run_logic_walls+0x40>
			move_front();
			_delay_ms(500);
		}
		else if(hitRight == TRUE) {
			//turn_left_arc();
			turn_left_soft();
 286:	0e 94 d7 00 	call	0x1ae	; 0x1ae <turn_left_soft>
			move_front();
 28a:	0e 94 7c 00 	call	0xf8	; 0xf8 <move_front>
 28e:	9f ef       	ldi	r25, 0xFF	; 255
 290:	23 ec       	ldi	r18, 0xC3	; 195
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	91 50       	subi	r25, 0x01	; 1
 296:	20 40       	sbci	r18, 0x00	; 0
 298:	80 40       	sbci	r24, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <run_logic_walls+0xb2>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <run_logic_walls+0xbc>
 29e:	00 00       	nop
 2a0:	de cf       	rjmp	.-68     	; 0x25e <run_logic_walls+0x7c>
			_delay_ms(200);
			
		}
		else if(farRight == TRUE) {
 2a2:	91 30       	cpi	r25, 0x01	; 1
 2a4:	d1 f6       	brne	.-76     	; 0x25a <run_logic_walls+0x78>
 2a6:	cb cf       	rjmp	.-106    	; 0x23e <run_logic_walls+0x5c>

000002a8 <main>:

int main(void)
{
	
	
	pwm_init();
 2a8:	0e 94 4a 00 	call	0x94	; 0x94 <pwm_init>
	ADC_init();
 2ac:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_init>
	//second led for debug only (added extra, not native)
	//DDRC |= _BV(PC0);
	//PORTC |= _BV(PC0);
	
	//set input
	IN_DDR  |= _BV(IN1) | _BV(IN2) | _BV(IN3) | _BV(IN4);
 2b0:	84 b1       	in	r24, 0x04	; 4
 2b2:	8f 60       	ori	r24, 0x0F	; 15
 2b4:	84 b9       	out	0x04, r24	; 4
	//set led
	LED_DDR |= _BV(LED);	
 2b6:	57 9a       	sbi	0x0a, 7	; 10
	//set direction
	IN_PORT |= _BV(IN2) | _BV(IN3);
 2b8:	85 b1       	in	r24, 0x05	; 5
 2ba:	86 60       	ori	r24, 0x06	; 6
 2bc:	85 b9       	out	0x05, r24	; 5
	
	//senzor_test();
	//led_test();
 	//full_test();
	//run_logic();
	run_logic_walls();
 2be:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <run_logic_walls>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
